version: '2.1'

anchors:
  filters: &filters
    filters:
      branches:
        only: main

orbs:
  node: circleci/node@4.1
  aws-ecr: circleci/aws-ecr@6.15.2
  aws-ecs: circleci/aws-ecs@2.2.1
  aws-cli: circleci/aws-cli@2.0.6


jobs:
  validate:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform validate
          command: |
            cd infra
            terraform init -input=false
            terraform validate
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd infra
            terraform init -input=false
            terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd infra
            terraform apply -auto-approve "tfapply"
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd infra
            terraform destroy -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  test:
    docker:
      - image: cimg/node:15.1
    steps:
      - checkout
      - run:
          name: Unit test
          command: cd app && npm i && npm test

  run-task:
    docker:
      - image: 'cimg/python:3.9.1'
    steps:
      - aws-cli/setup
      - aws-ecs/run-task:
          cluster: node-js-app-production-cluster
          security-group-ids: $SECURITY_GROUP_IDS
          subnet-ids: '$SUBNET_ONE, $SUBNET_TWO'
          task-definition: node-js-app-task
          assign-public-ip: ENABLED

workflows:
  version: 2
  deploy_infra:
    jobs:
      - validate
      - plan-apply:
          requires:
            - validate
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply
      - hold-destroy:
          type: approval
          requires:
            - plan-apply
      - destroy: 
          requires:
            - hold-destroy

  deploy_service:
    jobs:
      - test
      - aws-ecr/build-and-push-image:
          <<: *filters
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          create-repo: false
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: ./app
          profile-name: default
          repo: "node-js-app-production-ecr"
          skip-when-tags-exist: false
          tag: 'latest,$CIRCLE_SHA1'
          requires:
            - test
      # - run-task:
      #     requires:
      #       - aws-ecr/build-and-push-image # only run this job once aws-ecr/build-and-push-image has completed
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image # only run this job once aws-ecr/build-and-push-image has completed
          aws-region: AWS_DEFAULT_REGION
          family: "node-js-app-production-ecs-service"
          cluster-name: "node-js-app-production-cluster"
          container-image-name-updates: "container=node-js-app-production-container,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/node-js-app-production-ecr:latest,${CIRCLE_SHA1}"
          verify-revision-is-deployed: true
          force-new-deployment: true