version: 2.1

anchors:
  filters: &filters
    filters:
      branches:
        only: main

orbs:
  node: circleci/node@4.1
  aws-ecr: circleci/aws-ecr@6.15.2


jobs:
  validate:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform validate
          command: |
            cd infra
            terraform init -input=false
            terraform validate
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd infra
            terraform init -input=false
            terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd infra
            terraform apply -auto-approve "tfapply"
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  test:
    docker:
      - image: cimg/node:15.1
    steps:
      - checkout
      - run:
          name: Unit test
          command: cd app && npm i && npm test

workflows:
  version: 2
  deploy_infra:
    jobs:
      - validate
      - plan-apply:
          requires:
            - validate
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply

  deploy_service:
    jobs:
      - test
      - aws-ecr/build-and-push-image:
          <<: *filters
          name: Build and Push Docker Image
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          context: nodejs-test
          create-repo: false
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: ./app
          profile-name: default
          repo: nodejs
          skip-when-tags-exist: false
          tag: 'latest,$CIRCLE_SHA1'
          requires:
            - test